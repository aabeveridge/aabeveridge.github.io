[Intro](https://aaronbev79.github.io/markdown/markdown_intro.html)//[History](https://aaronbev79.github.io/markdown/markdown_history.html)//[Examples](https://aaronbev79.github.io/markdown/markdown_examples.html)

##The Markdown Movement: Rhetorical Velocity, Multi-Delivery, and Typesetting

Often, the context and history of particular technological innovations matter little once they have been normalized into everyday life. How many writers know the history of word processor software or the choices behind its development? Many writers remain unaware of this history because it is inconsequential to the function of the tool. The Internet has brought about rapid and ongoing development of writing software during the last twenty years. The most pervasive of which are cloud writing technologies that function ubiquitously within any Internet browser--allowing users to access their writing on any web-connected device. Yet, given these ongoing developments, many writers still rely on standalone installations of word processing software. Of which, Microsoft Word remains the primary mainstay for writers. In writing and rhetoric, most major journals continue to request a document formatted with Microsoft’s proprietary format: DOCX. There have been many challenges to Microsoft’s word-processing monopoly. Open Office and Libre Office are two freely available applications that offer similar functionality to Word, but the open source nature of their development has done little to affect the broader problem affecting word processor software: WYSIWYG (What You See Is What You Get; pronounced: wizzy-wig) software hides typesetting syntax and formatting code in order to allow users to write in an environment that closely resembles their document’s final form. Newer WYSIWYG writing environments such as Scrivener, Google Docs, Evernote, or minimalist software such as WriteRoom, do little alleviate the problems inherent to WYSIWYG production. XXXstate thesis hereXXX

Recent work in writing studies to further expand the possibilities and implications of the rhetorical canon of delivery motivate technical and cybernetic readings of the canon’s importance for rhetoric and writing. Collin Gifford Brooke’s Lingua Fracta explains that in order for writing studies to “contribute to discussions and debates about new media” it is necessary to “rethink some of our own cherished and unexamined assumptions” (5). Brooke’s Lingua Fracta examines the rhetorical canons through a technological lens. Brooke argues for delivery as circulation: “seeing discourse as circulating rather than something that we circulate” (192). Drawing on classical rhetoric, Brooke situates delivery and circulation within the concept of performance, and he considers delivery for its “intransitive incarnations.” While Brooke is careful to explain that there is no need to choose between transitive or intransitive understandings of delivery, he is explicit when he argues that “we must consciously resist the impulse to reduce the canon to a transitive, instrumental process of transmission” (177). While Brooke’s call to not reduce delivery to only the technological transmission of meaning is no doubt an important counter-balance, the opposite, which Brooke acknowledges, is also crucial to the ongoing work to expand the importance of delivery and circulation. Research that seeks to understand the transitive, instrumental process of transmission in the various mediums available to rhetors, must feedback into the broader, ongoing work to rewrite the relevance of delivery. 

Rhetorical velocity bridges the gap between transitive and intransitive revisions of delivery and circulation. Jim Ridolfo and Danielle Nicole Devoss explain in their Kairos article, “Composing for Recomposition: Rhetorical Velocity and Delivery,” that “delivery is a highly useful container and category to think from as a conceptual space.” Similar to Brooke, they do not limit delivery to an intransient concept, but they focus more so on the the strategic, temporal elements of delivery particular to the various technologies through which writing is delivered:

>Rhetorical velocity is, simply put, a strategic approach to composing for rhetorical delivery. It is both a way of considering delivery as a rhetorical mode, aligned with an understanding of how	texts work as a component of a strategy. In the inventive thinking of composing, rhetorical velocity is the strategic theorizing for how a text might be recomposed (and why it might be recomposed) by third parties, and how this recomposing may be useful or not to the short- or long-term rhetorical objectives of the rhetorician.

A limitation of rhetorical velocity, as Ridolfo and Devoss frame the theory, is the focus on human remix and recomposition. Certainly, they discuss the technological and cybernetic aspects of delivery, but the system they propose for discerning possible future remixes and recompositions starts with a simple question: “Who is interested?”. At a glance, this makes sense as the first question. Most people write for a human reader and most recompositions are eventually made by humans, but making the primary question “who?” narrowly limits and overly determines the possibilities for how writers may utilize delivery when inventing. Often the network or system holds just as much potentiality in affecting how or why something is remixed and recomposed, as does the eventual audience that may receive it. 

In cybernetic conceptions of writing within complex networks, what Sidney I. Dobrin calls “writing-as-system” in Postcomposition, attempts to generalize an audience or rhetorical effects become problematic because they require “seeing rhetoric as an attempt to identify parts within a whole” (166). As Dobrin explains, “the whole of writing can never be explained by way of its parts but instead through the properties of its interconnectedness” (144). Therefore, if delivery is thought of in terms of the autopoetic “strange loops” offered by Dobrin, what he also refers to as “hyper-circulation,” transient and technological research into delivery may not be differentiated from intransient conceptions of delivery that philosophically investigate identity, values, and meaning. In complex networks, there is no clear way to differentiate between the two. In anything, the opposite of the Quintilian model of rhetoric may show itself to be more effective--what is often understood as techne or pejorative sophistry. Technological innovation100%s that speed up and increase the capabilities for remixing may prove to be the more effective site for challenging contemporary values that constitute and limit the possibilities of what is “real.” In writing-as-system, technological disruption is social disruption; technological change is social change. 

Markdown is gaining significant momentum among blog writers, ebook publishers, web developers, and open source programmers as an alternative to WYSIWYG writing and editing. Markdown’s name is confusing because Markdown is a markup language--like HTML (hypertext markup language). While Markdown’s initial developer John Gruber does not explicitly explain the name choice, the “down” in Markdown likely signifies the primary goal in Markdown’s creation: a simple, limited markup syntax for writing. As such, Markdown is more movement than innovation because Markdown provides no functionality that does not already exist in other far superior markup languages such as HTML or LaTex. In fact, even referring to Markdown as a “language” is misleading--Markdown is merely a plain text syntax with a very short list of conventions. While HTML and LaTeX are turing complete programming languages, Markdown syntax is useless without an accompanying programming language and conversion tool. John Gruber’s original Markdown relies on the Perl programming language in order to convert plain text into HTML based on Markdown syntax. However, built-in limitations are arguably the core motivation behind the Markdown movement. LaTeX, for example, is arguably the most powerful and well-developed publishing language for typesetting documents, but LaTeX is notoriously difficult to learn. The same is true for web publishing. No one would suggest that Markdown even comes close to the functionality available within HTML, but HTML provides a visually difficult environment for writing. And, like LaTeX, HTML has a high learning curve. 

In their 1999 article for Computers and Composition, “Reading between the Code: The Teaching of HTML and the Displacement of Writing Instruction,” Nicholas Mauriello, Gian Pagnucci, and Tammy Winner investigate the emerging friction between WYSIWYG writing and Internet publishing with HTML. Sixteen years later, the problems they explain with web publishing have not been solved. At the time they were writing, Microsoft had recently released an HTML conversion tool for its software, and students could write their documents in a standard word-processing software and then convert that writing to HTML As the authors explain, “the HTML converters of word-processing software and the WYSIWYG software led to the fewest number of student publications on the Web” (415). Their article identifies two key problems: (1) the conversion and transfer of HTML files to the Web for publishing, and (2) the steep learning curve associated with HTML and Web publishing. The solution they present was to have the instructor complete the work of document conversion to HTML, and then publish the documents to the Web for the students. Web 2.0 appears to have solved the problem of digital publishing for students--blog engines, website generators, social network sharing, cloud writing/editing tools, and countless others now provide students with endless options for self-publishing and circulating their multimodal compositions. However, as Kristin L. Arola explains in “The Design of Web 2.0: The Rise of the Template, The Fall of Design,” when writers “plod through the template-driven nature of Web 2.0” they are faced with a difficult split between form and content that leaves form/design to the template while writers merely fill in the content (12). Thus, the work that was previously completed by instructors in the 1999 “Reading between the Code” article, is now completed by templates and WYSIWYG cloud tools. In both cases, students remain shockingly unaware of how their compositions are coded, converted, and reconstructed on/through the Web. As Arola explains, students’ familiarity and ease-of-use with technology should not be confused with an understanding of how those technologies function. She quotes one of her students when providing the following analogy: “Just because I can drive a car doesn’t mean I can fix one” (5).

In Web 2.0 the friction between coded writing, such as HTML, and WYSIWYG software seems to have been dissolved. However, in reality, all that has happened is that WYSIWYG has moved to the cloud. Whether it is blogging software, online wiki generators, or social media applications--most of these online tools now provide a convenient window with a handful of formatting options that allow writers to immediately write in their browser and post to the Web. For many types of writing that occur in social networks or other Web 2.0 interfaces, this democratization of publishing provides incredible benefits to writers because often the goal is to share something within the community afforded by the network, based on the tools the network provides. However, in the case of more serious or lengthy compositions--the kinds of multimodal projects students often undertake in advanced composition seminars or graduate courses--Web 2.0 poses significant challenges for writers. 
